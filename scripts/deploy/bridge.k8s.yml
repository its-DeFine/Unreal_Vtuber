---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: neurosync
spec:
  replicas: 1
  selector:
    matchLabels:
      app: neurosync
  template:
    metadata:
      labels:
        app: neurosync
    spec:
      containers:
        - name: neurosync
          image: ghcr.io/its-define/neurobridge:main
          command: ["/app/entrypoint_bridge.sh"]
          ports:
            - containerPort: 5000
            - containerPort: 5001
          env:
            - name: FLASK_HOST
              value: "0.0.0.0"
            - name: PYTHONUNBUFFERED
              value: "1"
            - name: ALLOWED_ORIGINS
              value: "*"
            - name: PLAYER_PORT
              value: "5001"
            - name: USE_REDIS_SCB
              value: "true"
            - name: REDIS_URL
              value: "redis://redis:6379/0"
            - name: TTS_PROVIDER
              value: "kokoro"
            - name: KOKORO_TTS_SERVER_URL
              value: "http://host.docker.internal:6006"
            - name: KOKORO_DEFAULT_VOICE
              value: "af_sarah"
            - name: KOKORO_TTS_TIMEOUT
              value: "30"
            - name: KOKORO_TTS_LANGUAGE
              value: "en"
---
apiVersion: v1
kind: Service
metadata:
  name: neurosync
spec:
  selector:
    app: neurosync
  ports:
    - port: 5000
      targetPort: 5000
    - port: 5001
      targetPort: 5001
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
        - name: redis
          image: redis:7-alpine
          ports:
            - containerPort: 6379
          volumeMounts:
            - name: redis-data
              mountPath: /data
      volumes:
        - name: redis-data
          emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: redis
spec:
  selector:
    app: redis
  ports:
    - port: 6379
      targetPort: 6379
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: ankane/pgvector:latest
          env:
            - name: POSTGRES_PASSWORD
              value: "postgres"
            - name: POSTGRES_USER
              value: "postgres"
            - name: POSTGRES_DB
              value: "autonomous_agent"
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
          ports:
            - containerPort: 5432
          volumeMounts:
            - name: postgres-data
              mountPath: /var/lib/postgresql/data
      volumes:
        - name: postgres-data
          emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
spec:
  selector:
    app: postgres
  ports:
    - port: 5432
      targetPort: 5432
---
apiVersion: batch/v1
kind: Job
metadata:
  name: db-init
spec:
  template:
    spec:
      restartPolicy: OnFailure
      containers:
        - name: db-init
          image: postgres:16-alpine
          env:
            - name: PGPASSWORD
              value: "postgres"
          command: ["sh", "-c",
            "psql -h postgres -U postgres -d autonomous_agent -f /setup_analytics_tables.sql"]
          volumeMounts:
            - name: setup-sql
              mountPath: /setup_analytics_tables.sql
              subPath: setup_analytics_tables.sql
      volumes:
        - name: setup-sql
          configMap:
            name: setup-sql
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: autonomous-starter
spec:
  replicas: 1
  selector:
    matchLabels:
      app: autonomous-starter
  template:
    metadata:
      labels:
        app: autonomous-starter
    spec:
      containers:
        - name: autonomous-starter
          image: autonomous-starter:latest
          ports:
            - containerPort: 3000
          env:
            - name: PORT
              value: "3000"
            - name: LOG_LEVEL
              value: "debug"
            - name: MODEL_PROVIDER
              value: "livepeer"
            - name: LIVEPEER_GATEWAY_URL
              value: "https://dream-gateway.livepeer.cloud"
            - name: LIVEPEER_API_KEY
              value: ""
            - name: LIVEPEER_MODEL
              value: "meta-llama/Meta-Llama-3.1-8B-Instruct"
            - name: LIVEPEER_LARGE_MODEL
              value: "meta-llama/Meta-Llama-3.1-8B-Instruct"
            - name: LIVEPEER_SMALL_MODEL
              value: "meta-llama/Meta-Llama-3.1-8B-Instruct"
            - name: LIVEPEER_TEMPERATURE
              value: "0.6"
            - name: LIVEPEER_MAX_TOKENS
              value: "2048"
            - name: VTUBER_ENDPOINT_URL
              value: "http://neurosync:5001/process_text"
            - name: NEUROSYNC_URL
              value: "http://neurosync:5000"
            - name: NEUROSYNC_SCB_URL
              value: "http://neurosync:5000/scb/update"
            - name: AUTONOMOUS_LOOP_INTERVAL
              value: "30000"
            - name: DATABASE_URL
              value: "postgresql://postgres:postgres@postgres:5432/autonomous_agent"
---
apiVersion: v1
kind: Service
metadata:
  name: autonomous-starter
spec:
  selector:
    app: autonomous-starter
  ports:
    - port: 3000
      targetPort: 3000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ollama
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ollama
  template:
    metadata:
      labels:
        app: ollama
    spec:
      containers:
        - name: ollama
          image: ollama/ollama:latest
          ports:
            - containerPort: 11434
          volumeMounts:
            - name: ollama-data
              mountPath: /root/.ollama
          env:
            - name: OLLAMA_ORIGINS
              value: "*"
            - name: OLLAMA_HOST
              value: "0.0.0.0:11434"
            - name: OLLAMA_KEEP_ALIVE
              value: 24h
      volumes:
        - name: ollama-data
          emptyDir: {}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: setup-sql
data:
  setup_analytics_tables.sql: |
    -- ðŸš€ Autonomous Agent Analytics Tables Setup
    -- Adds enhanced analytics capabilities to existing ElizaOS database
    -- Compatible with current schema, adds new functionality without breaking changes

    -- Enable pgvector extension if not already enabled
    CREATE EXTENSION IF NOT EXISTS vector;

    -- Tool usage tracking table
    CREATE TABLE IF NOT EXISTS tool_usage (
        id SERIAL PRIMARY KEY,
        timestamp TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        agent_id UUID NOT NULL,
        tool_name VARCHAR(100) NOT NULL,
        input_context JSONB NOT NULL DEFAULT '{}',
        output_result JSONB NOT NULL DEFAULT '{}',
        execution_time_ms INTEGER,
        success BOOLEAN NOT NULL DEFAULT true,
        impact_score FLOAT DEFAULT 0.5,
        embedding VECTOR(1536),
        metadata JSONB DEFAULT '{}'
    );

    -- Add foreign key constraint only if agents table exists
    DO $$
    BEGIN
        IF EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'agents') THEN
            ALTER TABLE tool_usage ADD CONSTRAINT fk_tool_usage_agent 
            FOREIGN KEY (agent_id) REFERENCES agents(id) ON DELETE CASCADE;
        END IF;
    END $$;

    -- Performance indexes for efficient queries
    CREATE INDEX IF NOT EXISTS idx_tool_usage_agent_time ON tool_usage(agent_id, timestamp DESC);
    CREATE INDEX IF NOT EXISTS idx_tool_usage_tool_name ON tool_usage(tool_name);
    CREATE INDEX IF NOT EXISTS idx_tool_usage_success ON tool_usage(success, timestamp DESC);
    CREATE INDEX IF NOT EXISTS idx_tool_usage_impact ON tool_usage(impact_score DESC);

    -- Vector similarity search indexes (if using pgvector)
    CREATE INDEX IF NOT EXISTS idx_tool_usage_embedding ON tool_usage USING ivfflat (embedding vector_cosine_ops) WITH (lists = 100);
---
apiVersion: v1
kind: Service
metadata:
  name: ollama
spec:
  selector:
    app: ollama
  ports:
    - port: 11434
      targetPort: 11434
