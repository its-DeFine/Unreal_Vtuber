version: "3.9"
services:
  neurosync:
    mem_limit: 12g
    build:
      context: ..
      dockerfile: ./NeuroBridge/dockerfile  # Builds combined Local API + Player image
    container_name: neurosync_s1
    command: [/app/entrypoint_bridge.sh]
    ports:
      - "5000:5000" # Expose Flask API port
      - "5001:5001" # Expose Player HTTP Server port
    environment:
      - FLASK_HOST=0.0.0.0
      - PYTHONUNBUFFERED=1
      - ALLOWED_ORIGINS=*
      - PLAYER_PORT=5001 # Set Player HTTP Server port
      # SCB storage
      - USE_REDIS_SCB=true
      - REDIS_URL=redis://redis:6379/0
      # - LIVELINK_UDP_IP=your_host_ip_address_here # Commented out to use default 'host.docker.internal'
      # TTS Configuration - Kokoro TTS Integration
      - TTS_PROVIDER=kokoro
      - KOKORO_TTS_SERVER_URL=http://host.docker.internal:6006
      - KOKORO_DEFAULT_VOICE=af_sarah
      - KOKORO_TTS_TIMEOUT=30
      - KOKORO_TTS_LANGUAGE=en
      # Add other NeuroSync env vars as needed (e.g., USE_REDIS_SCB)
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1 # or 'all'
              capabilities: [gpu]
    networks:
      - scb_bridge_net
      - byoc
    volumes:
      # Mount NeuroBridge code for live editing (optional)
      - ../NeuroBridge:/app/NeuroBridge
    env_file:
      - ../.env

  redis:
    image: redis:7-alpine
    container_name: redis_scb
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - scb_bridge_net
    restart: unless-stopped

  postgres:
    image: ankane/pgvector:latest
    container_name: autonomous_postgres_bridge
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=autonomous_agent
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - autonomous_postgres_data:/var/lib/postgresql/data:rw
    ports:
      - '127.0.0.1:5434:5432'
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}']
      interval: 5s
      timeout: 5s
      retries: 5
    restart: always
    networks:
      - scb_bridge_net
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  db_init:
    image: postgres:16-alpine
    container_name: autonomous_db_init
    environment:
      - PGPASSWORD=postgres
    volumes:
      - ../tools/database/setup_analytics_tables.sql:/setup_analytics_tables.sql:ro
    networks:
      - scb_bridge_net
    depends_on:
      postgres:
        condition: service_healthy
    command: >
      sh -c "
      echo 'üîß [DB_INIT] Starting database initialization...';
      echo 'üìä [DB_INIT] Setting up analytics tables for autonomous agent...';
      psql -h postgres -U postgres -d autonomous_agent -f /setup_analytics_tables.sql;
      if [ $$? -eq 0 ]; then
        echo '‚úÖ [DB_INIT] Database analytics setup completed successfully!';
      else
        echo '‚ùå [DB_INIT] Database setup failed!';
        exit 1;
      fi;
      echo 'üéØ [DB_INIT] Autonomous agent database is ready for Phase 2!';
      "
    restart: "no"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  autonomous_starter:
    build:
      context: ../autonomous-starter
      dockerfile: Dockerfile
    container_name: autonomous_starter_s3
    working_dir: /app
    env_file:
      - ../.env
    ports:
      - "3100:3000"
    environment:
      - PORT=3000
      - LOG_LEVEL=debug
      - MODEL_PROVIDER=livepeer
      - LIVEPEER_GATEWAY_URL=https://dream-gateway.livepeer.cloud
      - LIVEPEER_API_KEY=
      - LIVEPEER_MODEL=meta-llama/Meta-Llama-3.1-8B-Instruct
      - LIVEPEER_LARGE_MODEL=meta-llama/Meta-Llama-3.1-8B-Instruct
      - LIVEPEER_SMALL_MODEL=meta-llama/Meta-Llama-3.1-8B-Instruct
      - LIVEPEER_TEMPERATURE=0.6
      - LIVEPEER_MAX_TOKENS=2048
      - OPENAI_API_KEY=
      - ANTHROPIC_API_KEY=
      - GROQ_API_KEY=
      - VTUBER_ENDPOINT_URL=http://neurosync:5001/process_text
      - NEUROSYNC_URL=http://neurosync:5000
      - NEUROSYNC_SCB_URL=http://neurosync:5000/scb/update
      - AUTONOMOUS_LOOP_INTERVAL=30000
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/autonomous_agent
      - POSTGRES_URL=postgresql://postgres:postgres@postgres:5432/autonomous_agent
      - DB_TYPE=postgres
    networks:
      - scb_bridge_net
    depends_on:
      postgres:
        condition: service_healthy
      neurosync:
        condition: service_started
      db_init:
        condition: service_completed_successfully
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  orchestrator:
    image: adastravideo/go-livepeer:dynamic-capabilities-2
    container_name: byoc-orchestrator
    volumes:
      - ../data/orchestrator:/data
    ports:
      - 9995:9995
    env_file:
      - ../.env
    command: ["-orchestrator",
          "-orchSecret=${ORCH_SECRET}",
          "-serviceAddr=0.0.0.0:9995",
          "-v=6",
          "-network=arbitrum-one-mainnet",
          "-ethUrl=https://arb1.arbitrum.io/rpc",
          "-ethPassword=${ETH_PASSWORD}",
          "-dataDir=/data",
          "-ethOrchAddr=",
          "-pricePerUnit=1"]
    networks:
      - byoc

  gateway:
    image: adastravideo/go-livepeer:dynamic-capabilities-2
    container_name: byoc-gateway
    command: ["-gateway", "-orchAddr=https://orchestrator:9995", "-httpAddr=0.0.0.0:9999", "-network=offchain"]
    ports:
      - "9999:9999"
    volumes:
      - ../data/gateway:/data
    networks:
      - byoc

  caddy:
    image: ghcr.io/its-define/webapp:main
    container_name: byoc-webapp
    ports:
      - "8088:8088"
    networks:
      - byoc
    restart: unless-stopped

  ollama:
    image: ollama/ollama:latest
    container_name: vtuber-ollama
    ports:
      - "11434:11434"
    volumes:
      - ../ollama_data:/root/.ollama
    environment:
      - OLLAMA_ORIGINS=*
      - OLLAMA_HOST=0.0.0.0:11434
      - OLLAMA_KEEP_ALIVE=24h
    restart: unless-stopped
    networks:
      - scb_bridge_net
      - byoc
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    profiles:
      - ollama

networks:
  scb_bridge_net:
    driver: bridge
  byoc:
    driver: bridge

volumes:
  redis_data:
    driver: local
  autonomous_postgres_data:
    driver: local
    name: autonomous_postgres_bridge_data
