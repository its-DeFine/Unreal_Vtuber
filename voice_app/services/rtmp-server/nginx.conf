# Nginx Configuration with RTMP Module for Real-Time Voice Streaming
# Optimized for low-latency audio/video processing and multi-quality output
# SINGLE CONTAINER VERSION - All services integrated in one container

worker_processes auto;
worker_rlimit_nofile 100000;

error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 4096;
    use epoll;
    multi_accept on;
    accept_mutex off;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;

    # Performance optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=streaming:10m rate=2r/s;

    # CORS headers for web playback
    add_header Access-Control-Allow-Origin * always;
    add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS' always;
    add_header Access-Control-Allow-Headers 'Origin, Content-Type, Accept, Authorization' always;

    # HTTP server for HLS and static content
    server {
        listen 8080;
        server_name localhost;

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # Statistics endpoint
        location /stats {
            rtmp_stat all;
            rtmp_stat_stylesheet stat.xsl;
            add_header Access-Control-Allow-Origin * always;
            limit_req zone=api burst=5 nodelay;
        }

        # Control endpoint for managing streams
        location /control {
            rtmp_control all;
            add_header Access-Control-Allow-Origin * always;
            limit_req zone=api burst=3 nodelay;
        }

        # HLS output directory for web playback
        location /hls {
            types {
                application/vnd.apple.mpegurl m3u8;
                video/mp2t ts;
            }
            root /tmp;
            add_header Cache-Control no-cache;
            add_header Access-Control-Allow-Origin * always;
            
            # Enable CORS preflight
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin * always;
                add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS' always;
                add_header Access-Control-Allow-Headers 'Origin, Content-Type, Accept, Authorization' always;
                add_header Access-Control-Max-Age 1728000;
                add_header Content-Type 'text/plain; charset=utf-8';
                add_header Content-Length 0;
                return 204;
            }
        }

        # DASH output directory (alternative to HLS)
        location /dash {
            root /tmp;
            add_header Cache-Control no-cache;
            add_header Access-Control-Allow-Origin * always;
        }

        # Recording files directory
        location /recordings {
            root /var/recordings;
            autoindex on;
            autoindex_exact_size off;
            autoindex_localtime on;
            add_header Access-Control-Allow-Origin * always;
            auth_basic "Recordings Access";
            auth_basic_user_file /etc/nginx/.htpasswd;
        }

        # Static files for player (web interface)
        location / {
            root /var/www/html;
            index index.html;
            try_files $uri $uri/ /index.html;
        }

        # Player specific location
        location /player {
            root /var/www;
            index index.html;
        }
    }
}

# RTMP Configuration Block
rtmp {
    server {
        listen 1935;
        chunk_size 4096;
        
        # Performance optimizations
        max_streams 1024;
        timeout 30s;
        ping 30s;
        ping_timeout 30s;
        max_message 10M;
        
        # Live streaming application
        application live {
            live on;
            
            # Security: Allow publishing only from specific IPs
            allow publish all;  # Configure specific IPs in production
            deny publish all;
            allow play all;
            
            # Stream recording
            record all;
            record_path /var/recordings;
            record_unique on;
            record_suffix .flv;
            record_max_size 1000M;
            record_max_frames 2;
            
            # Exec directives for enhanced processing
            exec_push /usr/local/bin/gstreamer_processor.py $name $addr;
            exec_kill_signal term;
            
            # Multiple quality outputs via exec_push
            exec_push /usr/local/bin/stream_processor.sh $name 240p;
            exec_push /usr/local/bin/stream_processor.sh $name 480p;
            exec_push /usr/local/bin/stream_processor.sh $name 720p;
            exec_push /usr/local/bin/stream_processor.sh $name 1080p;
            
            # HLS output for web playback
            hls on;
            hls_path /tmp/hls;
            hls_fragment 2s;
            hls_playlist_length 10s;
            hls_continuous on;
            hls_cleanup on;
            hls_nested on;
            hls_variant _240p BANDWIDTH=400000;
            hls_variant _480p BANDWIDTH=1000000;
            hls_variant _720p BANDWIDTH=2500000;
            hls_variant _1080p BANDWIDTH=5000000;
            
            # DASH output (adaptive streaming)
            dash on;
            dash_path /tmp/dash;
            dash_fragment 2s;
            dash_playlist_length 10s;
            dash_cleanup on;
            dash_nested on;
            
            # Low-latency optimizations
            sync 10ms;
            interleave on;
            wait_key on;
            wait_video on;
            drop_idle_publisher 10s;
            
            # Notification hooks - Disabled for single container deployment
            # Enable these if you integrate a web backend within the same container
            # on_publish http://localhost:8000/rtmp/on_publish;
            # on_play http://localhost:8000/rtmp/on_play;
            # on_record_done http://localhost:8000/rtmp/on_record_done;
            # on_publish_done http://localhost:8000/rtmp/on_publish_done;
            # on_play_done http://localhost:8000/rtmp/on_play_done;
        }
        
        # Voice-only streaming application (optimized for audio)
        application voice {
            live on;
            
            # Audio-specific settings
            allow publish all;
            allow play all;
            
            # Recording with audio focus
            record all;
            record_path /var/recordings/voice;
            record_unique on;
            record_suffix .flv;
            record_max_size 100M;
            
            # Audio processing pipeline
            exec_push /usr/local/bin/audio_processor.py $name $addr;
            
            # HLS for voice (audio-only)
            hls on;
            hls_path /tmp/hls/voice;
            hls_fragment 2s;
            hls_playlist_length 6s;
            hls_continuous on;
            hls_cleanup on;
            
            # Voice enhancement notifications - Disabled for single container
            # on_publish http://localhost:8000/rtmp/voice/on_publish;
            # on_play http://localhost:8000/rtmp/voice/on_play;
            # on_record_done http://localhost:8000/rtmp/voice/on_record_done;
        }
        
        # Test application for development
        application test {
            live on;
            allow publish all;
            allow play all;
            
            # Simple HLS output for testing
            hls on;
            hls_path /tmp/hls/test;
            hls_fragment 1s;
            hls_playlist_length 5s;
            hls_cleanup on;
        }
        
        # Relay application for remote streaming
        application relay {
            live on;
            allow publish all;
            allow play all;
            
            # Pull streams from remote sources
            pull rtmp://source.example.com/live/stream name=remote_stream;
            
            # Push to multiple destinations
            push rtmp://destination1.example.com/live/stream;
            push rtmp://destination2.example.com/live/stream;
            
            # Notification for relay events - Disabled for single container
            # on_publish http://localhost:8000/rtmp/relay/on_publish;
            # on_play http://localhost:8000/rtmp/relay/on_play;
        }
    }
} 